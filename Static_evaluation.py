import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score

# Load the dataset
data = pd.read_csv('static_features.csv')

# Preprocess the data
# Assuming 'Class' is the target column and it's categorical
X = data.drop('Class', axis=1)
y = data['Class']

# Encode categorical data if present
if X.select_dtypes(include=['object']).empty == False:
    X = pd.get_dummies(X)

# Scale the features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Label encode the target variable
le = LabelEncoder()
y = le.fit_transform(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize classifiers
models = {
    'Logistic Regression': LogisticRegression(max_iter=1000),
    'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42),
    'SVM': SVC(kernel='linear')
}

# Train and evaluate each model
results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    results[name] = {
        'accuracy': accuracy,
        'report': report
    }

# Output the results
for name, result in results.items():
    print(f"{name} Results:")
    print("Accuracy:", result['accuracy'])
    print(result['report'])