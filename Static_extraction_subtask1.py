import os
import csv
import pefile
import math

def detect_packer(pe):
    packers = [
        (b'UPX', b'UPX0'),
        (b'ASPack', b'\x00\x00\x00\x00\x68\x00\x00\x00\x00\x68\x00\x00\x00\x00\x68'),
        (b'PECompact', b'PECO'),
        (b'Themida', b'\x55\x8B\xEC\x83\xC4\xD0\x53\x56\x57'),
        (b'VMProtect', b'VMProtect'),
    ]

    for packer, signature in packers:
        if signature in pe.__data__:
            return packer.decode('utf-8')

    return 'Unpacked'

def extract_static_features(file_path):
    try:
        pe = pefile.PE(file_path)
    except pefile.PEFormatError:
        return None

    features = {}

    # Imported DLLs and APIs
    imported_dlls = set()
    imported_apis = set()
    try:
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            dll_name = entry.dll.decode('utf-8')
            imported_dlls.add(dll_name)
            for imp in entry.imports:
                api_name = imp.name.decode('utf-8') if imp.name else ''
                imported_apis.add(dll_name + ':' + api_name)
    except AttributeError:
        pass

    # Section info
    num_sections = pe.FILE_HEADER.NumberOfSections
    num_nonstandard_sections = 0
    num_mismatched_sections = 0
    for section in pe.sections:
        section_name = section.Name.decode('utf-8').strip('\x00')
        if section_name not in ['.text', '.data', '.rdata', '.rsrc']:
            num_nonstandard_sections += 1
        if section.Misc_VirtualSize != section.SizeOfRawData:
            num_mismatched_sections += 1

    # Entropy
    data = pe.trim()
    entropy = 0
    if len(data) > 0:
        byte_counts = [0] * 256
        for byte in data:
            byte_counts[byte] += 1
        probabilities = [float(c) / len(data) for c in byte_counts]
        entropy = -sum(p * math.log(p, 2) for p in probabilities if p != 0)

    # Packer detection
    packer = detect_packer(pe)

    features['Imported DLLs'] = imported_dlls
    features['Imported APIs'] = imported_apis
    features['Num Sections'] = num_sections
    features['Num Nonstandard Sections'] = num_nonstandard_sections
    features['Num Mismatched Sections'] = num_mismatched_sections
    features['Entropy'] = entropy
    features['Packer'] = packer

    return features

def main():
    print("Starting static feature extraction...")

    malware_dir = 'C:\\Users\\ys062\\Desktop\\200benign'
    benign_dir = 'C:\\Users\\ys062\\Desktop\\Reduced200'

    all_features = []
    all_dlls = set()
    all_apis = set()

    # Process malware files
    for filename in os.listdir(malware_dir):
        print(f"Processing malware file: {filename}")
        file_path = os.path.join(malware_dir, filename)
        features = extract_static_features(file_path)
        if features:
            features['Filename'] = filename
            features['Class'] = 'Malware'
            all_features.append(features)
            all_dlls.update(features['Imported DLLs'])
            all_apis.update(features['Imported APIs'])

    # Process benign files
    for filename in os.listdir(benign_dir):
        print(f"Processing benign file: {filename}")
        file_path = os.path.join(benign_dir, filename)
        features = extract_static_features(file_path)
        if features:
            features['Filename'] = filename
            features['Class'] = 'Benign'
            all_features.append(features)
            all_dlls.update(features['Imported DLLs'])
            all_apis.update(features['Imported APIs'])

    # Write features to CSV
    csv_columns = ['Filename', 'Class'] + list(all_dlls) + list(all_apis) + [
        'Num Sections', 'Num Nonstandard Sections', 'Num Mismatched Sections',
        'Entropy', 'Packer'
    ]
    with open('static_features.csv', 'w', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=csv_columns)
        writer.writeheader()
        for features in all_features:
            row = {col: 1 if col in features['Imported DLLs'] or col in features['Imported APIs'] else features.get(col, 0) for col in csv_columns}
            writer.writerow(row)

    print("Static feature extraction completed. Results saved to 'static_features.csv'.")

if __name__ == '__main__':
    main()