import re
import csv

# Expanded list of malicious API calls
malicious_api_calls = [
    "NtCreateUserProcess", "NtWriteVirtualMemory", "NtProtectVirtualMemory",
    "NtAllocateVirtualMemory", "NtFreeVirtualMemory", "NtCreateMutant",
    "NtTerminateProcess", "NtCreateProcess", "NtCreateProcessEx",
    "NtCreateThread", "NtCreateThreadEx", "NtOpenProcess", "NtOpenThread",
    "NtReadVirtualMemory", "NtMapViewOfSection", "NtUnmapViewOfSection",
    "NtQueueApcThread", "NtGetContextThread", "NtSetContextThread",
    "NtSuspendThread", "NtResumeThread", "NtTerminateThread",
    "NtCreateFile", "NtOpenFile", "NtReadFile", "NtWriteFile",
    "NtDeleteFile", "NtDeviceIoControlFile", "NtQueryInformationFile",
    "NtSetInformationFile", "NtCreateKey", "NtOpenKey", "NtDeleteKey",
    "NtQueryKey", "NtSetValueKey", "NtDeleteValueKey", "NtEnumerateKey",
    "NtEnumerateValueKey", "NtCreateSection", "NtOpenSection",
    "NtMapViewOfSection", "NtUnmapViewOfSection", "NtQuerySystemInformation",
    "NtQueryInformationProcess", "NtQueryInformationThread",
    "NtCreateMutant", "NtOpenMutant", "NtCreateEvent", "NtOpenEvent",
    "NtCreateSemaphore", "NtOpenSemaphore", "NtCreateTimer", "NtOpenTimer",
    "NtCreateNamedPipeFile", "NtCreateMailslotFile", "NtLoadDriver",
    "NtUnloadDriver", "NtLoadKey", "NtLoadKey2", "NtReplaceKey",
    "NtSaveKey", "NtSaveKeyEx", "NtCreateDebugObject", "NtDebugActiveProcess",
    "NtCreateToken", "NtOpenProcessToken", "NtOpenThreadToken",
    "NtDuplicateToken", "NtAdjustPrivilegesToken", "NtSetInformationToken",
    "NtCreateProfile", "NtStartProfile", "NtStopProfile", "NtSystemDebugControl"
]

# Function to extract API names from the log file
def extract_api_names(log_file):
    api_names = []
    with open(log_file, "r") as file:
        content = file.read()
        matches = re.findall(r"<.*?>-<.*?> (.*?)\(", content)
        for match in matches:
            api_names.append(match)
    return api_names

# Function to determine maliciousness based on API name
def is_malicious(api_name):
    return 1 if api_name in malicious_api_calls else 0

# Function to write API names and maliciousness indicators to CSV
def write_to_csv(api_names, output_file):
    with open(output_file, "w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["API Name", "Maliciousness Indicator"])
        for api_name in api_names:
            maliciousness = is_malicious(api_name)
            writer.writerow([api_name, maliciousness])

# Main function
def main():
    log_file = "C:\\Users\\john3\\Desktop\\api\\LogsAPIminer.txt"
    output_file = "api_maliciousness.csv"
    api_names = extract_api_names(log_file)
    write_to_csv(api_names, output_file)
    print(f"Analysis complete. Results written to {output_file}.")

if __name__ == "__main__":
    main()